"use strict";$(document).click(function(a){a=$(a.target);!0!==$(".navbar-collapse").hasClass("show")||a.hasClass("navbar-toggler")||$(".navbar-toggler").click()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
